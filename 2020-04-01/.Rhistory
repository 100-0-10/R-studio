qplot(welfare$sex)
# 이상치 확인
table(welfare$sex)
# 이상치 결측 처리
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex)
# 이상치 확인
table(welfare$sex)
table(welfare$sex)
class(welfare$sex)
table(welfare$sex)
# 이상치 결측 처리
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex)
class(welfare$income)
summary(welfare$income)
qplot(welfare$income)
qplot(welfare$income) + xlim(0, 1000)
# 이상치 결측 처리
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
# 이상치 결측 처리
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
# 결측치 확인
table(is.na(welfare$income))
View(welfare)
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
group_by(ageg, welfare$code_region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
ageg_region
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
count(ageg, welfare$code_region) %>%
group_by(ageg) %>%
mutate(pct = round(n/sum(n) * 100, 1))
ageg_region
# 박스 플롯
mag <- quakes$mag
min(mag)
max(mag)
median(mag)
quantile(mag, c(0.25, 0.5, 0.750))
boxplot(mag,
main = "지진 발생 강도의 분포",
xlab = "지진 강도", ylab = "발생 건수",
col="red")
# 그룹형 바 차트 (Grouped Bar Chart)
barplot(height,
names.arg = name,
main = "부서별 영업 실적",
xlab = "부서",
ylab = "영업 실적(억 원)",
col = c("darkblue", "red", "orange"),
legend.text = legend_lbl,
ylim = c(0, 50),
beside = TRUE,
args.legend = list(x = 'topright'))
height1 <- c(4, 18, 5, 8)
height2 <- c(9, 15, 20, 6)
height3 <- c(3, 10, 15, 8)
height <- rbind(height1, height2, height3)
name <- c("영업 1팀", "영업 2팀", "영업 3팀", "영업 4팀")
legend_lbl <- c("2014년", "2015년", "2016년")
barplot(height,
names.arg = name,
main = "부서별 영업 실적",
xlab = "부서",
ylab = "영업 실적(억 원)",
col = c("darkblue", "red", "yellow"),
legend.text = legend_lbl,
ylim = c(0, 50))
# 그룹형 바 차트 (Grouped Bar Chart)
barplot(height,
names.arg = name,
main = "부서별 영업 실적",
xlab = "부서",
ylab = "영업 실적(억 원)",
col = c("darkblue", "red", "orange"),
legend.text = legend_lbl,
ylim = c(0, 50),
beside = TRUE,
args.legend = list(x = 'topright'))
barplot(height,
names.arg = name,
main = "부서별 영업 실적",
xlab = "부서",
ylab = "영업 실적(억 원)",
col = c("darkblue", "red", "yellow"),
legend.text = legend_lbl,
ylim = c(0, 50))
barplot(height,
names.arg = code_region,
main = "부서별 영업 실적",
xlab = "부서",
ylab = "영업 실적(억 원)",
col = c("darkblue", "red", "yellow"),
legend.text = legend_lbl,
ylim = c(0, 50))
ageg_region
ageg_region <- left_join(welfare$code_region, by = "welfre$code_region")
barplot(ageg_region,
names.arg = code_region,
main = "부서별 영업 실적",
xlab = "부서",
ylab = "영업 실적(억 원)",
col = c("darkblue", "red", "yellow"),
legend.text = legend_lbl,
ylim = c(0, 50))
barplot(ageg_region,
names.arg = name,
main = "부서별 영업 실적",
xlab = "부서",
ylab = "영업 실적(억 원)",
col = c("darkblue", "red", "yellow"),
legend.text = legend_lbl,
ylim = c(0, 50))
# 바 차트의 수평 회전(가로 막대)
barplot(height,
names.arg = name,
main = "부서별 영업 실적",
col = rainbow(length(height)),
xlab = "부서",
ylab = "영업 실적(억 원)",
xlim = c(0, 25),
horiz=TRUE,
width=50)
barplot(ageg_region,
names.arg = name,
main = "부서별 영업 실적",
col = rainbow(length(height)),
xlab = "부서",
ylab = "영업 실적(억 원)",
xlim = c(0, 25),
horiz=TRUE,
width=50)
barplot(ageg_region,
names.arg = name,
main = "부서별 영업 실적",
col = rainbow(length(ageg_region)),
xlab = "부서",
ylab = "영업 실적(억 원)",
xlim = c(0, 25),
horiz=TRUE,
width=50)
barplot(ageg_region,
names.arg = name,
main = "부서별 영업 실적",
col = rainbow(length(ageg_region)),
xlab = "부서",
ylab = "영업 실적(억 원)",
xlim = c(0, 25),
horiz=TRUE)
barplot(t(ageg_region),
names.arg = name,
main = "부서별 영업 실적",
col = rainbow(length(ageg_region)),
xlab = "부서",
ylab = "영업 실적(억 원)",
xlim = c(0, 25),
horiz=TRUE)
barplot(t(ageg_region),
names.arg = welfare$code_region,
main = "1",
col = rainbow(length(ageg_region)),
xlab = "부서",
ylab = "영업 실적(억 원)",
xlim = c(0, 25),
horiz=TRUE)
t(ageg_region)
ageg_region
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
count(ageg, welfare$code_region) %>%
group_by(ageg) %>%
mutate(pct = round(n/sum(n) * 100, 1))
ageg_region
df_region <- ageg_region%>%
filter(ageg_region == "divorce") %>%
select(ageg, religion, pct)
ageg_religion_marriage <- welfare %>%
filter(!is.na(group_marriage) & ageg != "young") %>%
count(ageg, religion, group_marriage) %>%
group_by(ageg, religion) %>%
mutate(pct = round(n/sum(n) * 100, 1))
ageg_religion_marriage
df_divorce <- ageg_religion_marriage %>%
filter(group_marriage == "divorce") %>%
select(ageg, religion, pct)
df_divorce
df_region <- ageg_region %>%
filter(ageg_region == "divorce") %>%
select(ageg, region, pct)
df_divorce
df_region
df_region <- ageg_region %>%
filter(ageg_region == "divorce") %>%
select(ageg, region, pct)
df_region <- ageg_region %>%
filter(ageg_region == "region") %>%
select(ageg, region, pct)
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
group_by(ageg, welfare$code_region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
ageg_region
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
count(ageg, welfare$code_region) %>%
group_by(ageg) %>%
mutate(pct = round(n/sum(n) * 100, 1))
ageg_region
View(ageg_region)
View(divorce)
View(df_divorce)
View(divorce)
View(df_divorce)
View(ageg_marriage)
class(welfare$marriage)
table(welfare$marriage)
welfare$group_region <- welfare$region
df_region <- ageg_region %>%
filter(group_region) %>%
select(ageg, religion, pct)
df_region <- ageg_region %>%
select(ageg, religion, pct)
df_region <- ageg_region %>%
select(ageg, group_region, pct)
df_region <- ageg_region %>%
select(ageg, `welfare$code_region`, pct)
df_divorce
df_region <- ageg_region %>%
select(ageg, `welfare$code_region`, pct)
df_divorce
View(height)
df_region
barplot(df_region)
df_region
ggplot(data = df_region, aes(x = ageg, y = pct, fill = group_region)) +
geom_col(position = "dodge")
ggplot(data = df_region, aes(x = ageg, y = pct, fill = welfare$code_region)) +
geom_col(position = "dodge")
ggplot(data = df_region, aes(x = ageg, y = pct, fill = 'welfare$code_region')) +
geom_col(position = "dodge")
df_region
ggplot(data = df_region, aes(x = ageg, y = pct, fill = 'welfare$code_region')) +
geom_col(position = "dodge")
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg)) +
geom_col(position = "dodge")
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg)) +
geom_bar(position = "dodge")
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg)) +
geom_col(position = "dodge")
df_region
df_divorce
ggplot(data = df_divorce, aes(x = ageg, y = pct, fill = religion)) +
geom_col(position = "dodge")
# 남성 직업 빈도 상위 10개 직업
ggplot(data = job_male, aes(x = reorder(job, n), y = n)) +
geom_col() +
coord_flip()
# 여성 직업 빈도 상위 10개 직업
ggplot(data = job_female, aes(x = reorder(job, n), y = n)) +
geom_col() +
coord_flip()
welfare <- left_join(welfare, list_job, id = "code_job")
막대 정렬 : 초년, 중년, 노년 나이 순
ggplot(data = ageg_income, aes(x = ageg, y = mean_income)) +
geom_col() +
scale_x_discrete(limits = c("young", "middle", "old"))
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg)) +
geom_col()
welfare$ region <- welfare$region
ageg_region <- welfare %>%
filter(!is.na(region)) %>%
group_by(ageg, region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
region <- welfare$region
ageg_region <- welfare %>%
filter(!is.na(region)) %>%
group_by(ageg, region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
region <- welfare$region
ageg_region <- welfare %>%
filter(!is.na(region)) %>%
group_by(ageg, region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
welfare$region <- welfare$region
ageg_region <- welfare %>%
filter(!is.na(region)) %>%
group_by(ageg, region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
df_region
welfare$group_region <- welfare$region
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
group_by(ageg, welfare$code_region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
ageg_region
welfare$group_region <- welfare$code_region
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
group_by(ageg, welfare$code_region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
ageg_region
- 지역별 연령대 비율표 만들기
- 그래프 만들기
class(welfare$code_region)
table(welfare$code_region)
welfare$group_region <- welfare$code_region
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
group_by(ageg, welfare$code_region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
ageg_region
count() 활용
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
count(ageg, welfare$code_region) %>%
group_by(ageg) %>%
mutate(pct = round(n/sum(n) * 100, 1))
ageg_region
df_region <- ageg_region %>%
select(ageg, `welfare$code_region`, pct)
df_region
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg, group = ageg)) +
geom_col()
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg, group = ageg)) +
geom_bar()
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg, group = ageg)) +
geom_bar(stat="identity")
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg, group = 'welfare$code_region')) +
geom_bar(stat="identity") +
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg, group = 'welfare$code_region')) +
geom_bar(stat="identity")
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg, group = 'welfare$code_region')) +
geom_bar(stat="identity")
list_region <- data.frame(code_region = c(1:7),
region = c("서울",
"수도권(인천/경기)",
"부산/경남/울산",
"대구/경북",
"대전/충남",
"강원/충북",
"광주/전남/전북/제주도"))
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
group_by(ageg, welfare$code_region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
ageg_region
count() 활용
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
count(ageg, welfare$code_region) %>%
group_by(ageg) %>%
mutate(pct = round(n/sum(n) * 100, 1))
ageg_region
ageg_region <- welfare %>%
filter(!is.na(list_region)) %>%
group_by(ageg, welfare$code_region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
list_region
welfare <- left_join(welfare, list_region, id = "code_region")
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
group_by(ageg, welfare$code_region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
ageg_region
welfare %>%
select(code_region, region) %>%
head
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
group_by(ageg, welfare$code_region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 1))
ageg_region
ageg_region
df_region
ageg_region <- welfare %>%
group_by(ageg, region) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 2))
ageg_region
head(ageg_region)
ageg_region <- welfare %>%
group_by(region, ageg) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group * 100, 2))
head(ageg_region)
ageg_region
ageg_region <- welfare %>%
filter(!is.na(welfare$code_region)) %>%
count(ageg, welfare$code_region) %>%
group_by(ageg) %>%
mutate(pct = round(n/sum(n) * 100, 1))
ageg_region
ageg_region <- welfare %>%
count(region, ageg) %>%
group_by(ageg) %>%
mutate(pct = round(n/sum(n) * 100, 1))
ageg_region
ageg_region <- welfare %>%
count(region, ageg) %>%
group_by(ageg) %>%
mutate(pct = round(n/sum(n) * 100, 2))
ageg_region
ggplot(data = df_region, aes(x = 'welfare$code_region', y = pct, fill = ageg, group = 'welfare$code_region')) +
geom_bar(stat="identity")
ggplot(data = df_region, aes(x = region, y = pct, fill = ageg, group = 'welfare$code_region')) +
geom_bar(stat="identity")
ggplot(data = df_region, aes(x = region, y = pct, fill = ageg) +
geom_col()
ggplot(data = df_region, aes(x = region, y = pct, fill = ageg) +
ggplot(data = df_region, aes(x = region, y = pct, fill = ageg) +  geom_col()
ggplot(data = df_region, aes(x = region, y = pct, fill = ageg)) +  geom_col()
ggplot(data = df_region, aes(x = region, y = pct, fill = ageg)) +  geom_col()
ageg_region <- welfare %>%
count(region, ageg) %>%
group_by(region) %>%
mutate(pct = round(n/sum(n) * 100, 2))
ageg_region
ageg_region <- welfare %>%
count(region, ageg) %>%
group_by(ageg) %>%
mutate(pct = round(n/sum(n) * 100, 2))
ageg_region
ageg_region <- welfare %>%
count(region, ageg) %>%
group_by(region) %>%
mutate(pct = round(n/sum(n) * 100, 2))
ageg_region
ggplot(data = ageg_region, aes(x = region, y = pct, fill = ageg)) +  geom_col()
ggplot(data = ageg_region, aes(x = region, y = pct, fill = ageg)) +
geom_col() +
coord_flip()
3. 막대 정렬하기 : 노년층 비율 높은 순
# 노년층 비율 내림차순 정렬
list_order_old <- region_ageg %>%
filter(ageg == "old") %>%
arrange(pct)
3. 막대 정렬하기 : 노년층 비율 높은 순
# 노년층 비율 내림차순 정렬
list_order_old <- ageg_region %>%
filter(ageg == "old") %>%
arrange(pct)
list_order_old
ggplot(data = list_order_old, aes(x = region, y = pct, fill = ageg)) +
geom_col() +
coord_flip()
list_order_old
# 지역명 순서 변수 만들기
order <- list_order_old$region
orer
order
ggplot(data = ageg_region, aes(x = region, y = pct, fill = ageg)) +
geom_col() +
coord_flip() +
scale_x_discreate(limits = order)
library(scales)
ggplot(data = ageg_region, aes(x = region, y = pct, fill = ageg)) +
geom_col() +
coord_flip() +
scale_x_discreate(limits = order)
detach("package:scales", unload = TRUE)
library(scales)
ggplot(data = ageg_region, aes(x = region, y = pct, fill = ageg)) +
geom_col() +
coord_flip() +
scale_x_discreate(limits = order)
ggplot(data = ageg_region, aes(x = region, y = pct, fill = ageg)) +
geom_col() +
coord_flip() +
scale_x_discreate(limits = order)
ggplot(data = ageg_region, aes(x = region, y = pct, fill = ageg)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits = order)
install.packages("devtools")
library(devtools)
install_github("dkahle/ggmap")
library(ggmap)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
cd ..
